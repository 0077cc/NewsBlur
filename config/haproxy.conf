global
  maxconn 4096
  user haproxy
  group haproxy
  daemon
  ca-base /srv/newsblur/config/certificates
  crt-base /srv/newsblur/config/certificates

defaults
  log global
  maxconn 4096
  mode http
  # Add x-forwarded-for header.
  option forwardfor
  option http-server-close
  timeout connect 5s
  timeout client 30s
  timeout server 30s
  # Long timeout for WebSocket connections.
  timeout tunnel 1h
  errorfile 503 /srv/newsblur/templates/502.html
 
frontend public
  # HTTP
  bind :80
  # Redirect all HTTP traffic to HTTPS
  # redirect scheme https if !{ ssl_fc }
 
  # HTTPS
  # Example with CA certificate bundle
  # bind :443 ssl crt intermediate.pem ca-file newsblur.com.crt
  # Example without CA certification bunch
  bind :443 ssl crt newsblur.pem
   
  # The node backends - websockets will be managed automatically, given the
  # right base paths to send them to the right Node.js backend.
  #
  # If you wanted to specifically send websocket traffic somewhere different
  # you'd use an ACL like { hdr(Upgrade) -i WebSocket }. Looking at path works
  # just as well, though - such as { path_beg /socket.io } or similar. Adjust your
  # rules to suite your specific setup.
  use_backend node if { path_beg /socket.io/ }
  # Everything else to Nginx.
  default_backend nginx
 
backend node
  balance leastconn
  # Check by hitting a page intended for this use.
  # option httpchk GET /served/by/node/isrunning
  # timeout check 500ms
  # Wait 500ms between checks.
  server node1 127.0.0.1:8888 check inter 500ms
  server node2 ec2-54-242-34-138.compute-1.amazonaws.com:8888 check inter 500ms
  server node3 ec2-54-242-38-48.compute-1.amazonaws.com:8888 check inter 500ms
  server node4 ec2-50-17-135-87.compute-1.amazonaws.com:8888 check inter 500ms
  server node5 ec2-50-16-7-166.compute-1.amazonaws.com:8888 check inter 500ms
  server node6 ec2-54-234-182-177.compute-1.amazonaws.com:8888 check inter 500ms
  server node7 ec2-23-22-123-187.compute-1.amazonaws.com:8888 check inter 500ms
  server node8 198.211.110.230:8888 check inter 500ms
  server node9 198.211.110.131:8888 check inter 500ms
  server node10 192.34.61.227:8888 check inter 500ms
  server node11 198.211.109.155:8888 check inter 500ms
 
backend nginx
  balance leastconn
  # Check by hitting a page intended for this use.
  # option httpchk GET /isrunning
  # timeout check 500ms
  # Wait 500ms between checks.
  server nginx1 127.0.0.1:81
  server nginx2 ec2-54-242-34-138.compute-1.amazonaws.com:80
  server nginx3 ec2-54-242-38-48.compute-1.amazonaws.com:80
  server nginx4 ec2-50-17-135-87.compute-1.amazonaws.com:80
  server nginx5 ec2-50-16-7-166.compute-1.amazonaws.com:80
  server nginx6 ec2-54-234-182-177.compute-1.amazonaws.com:80
  server nginx7 ec2-23-22-123-187.compute-1.amazonaws.com:80
  server nginx8 198.211.110.230:80
  server nginx9 198.211.110.131:80
  server nginx10 192.34.61.227:80
  server nginx11 198.211.109.155:80
   
# For displaying HAProxy statistics.
frontend stats
  # HTTPS only.
  # Example with CA certificate bundle
  # bind :1936 ssl crt zzgenie.com.pem ca-file gd_bundle.crt
  # Example without CA certification bunch
  bind :1936 ssl crt newsblur.pem
  default_backend stats
 
backend stats
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth admin:password